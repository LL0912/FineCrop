config= dict(
    dataset=dict(
        train=dict(type="ImageBase_MultiLevel_Dataset",
                   params=dict(
                       data_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/NPY_mini_norm_crop_small_2/train",
                       doy={"33UXP": [32,167,187,207,222,247,252,277,297,302,327],
                            "33UYP": [57,62,167,187,222,252,277,282,297,302,327]},
                       num_level=4,
                       select_type= None,
                       select_class=None,
                            )
                   ),
        val=dict(type="ImageBase_MultiLevel_Dataset",
                   params=dict(
                       data_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/NPY_mini_norm_crop_small_2/val",
                       doy={"33UXP": [32,167,187,207,222,247,252,277,297,302,327],
                            "33UYP": [57,62,167,187,222,252,277,282,297,302,327]},
                       num_level=4,
                       select_type= None,
                       select_class=None,
                            )),
        test=dict(type="ImageBase_MultiLevel_Dataset",
                   params=dict(
                       data_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/NPY_mini_norm_crop_small_2/test",
                       doy={"33UXP": [32,167,187,207,222,247,252,277,297,302,327],
                            "33UYP": [57,62,167,187,222,252,277,282,297,302,327]},
                       num_level=4,
                       select_type= None,
                       select_class=None,
                            )),

        batch_size=32,
        num_workers=4,
),
   model=dict(
       type="tsvit",
       params=dict(num_channels=10,
                   no_labellevel=1,
                   num_classlevel=[73],
                   use_channel_fg=True,
                   channel_group=4,
                   ),
   ),
#     model=dict(
#         type="convrnn",
#         params=dict(height=32,
#                     width=32,
#                     input_dim=10,
#                     nstage=1,
#                     cell="gru",
#                     num_classlevel=[87]),
#     ),
    #  model=dict(
    #      type="unet3d",
    #      params=dict(in_channel=10,
    #                  num_labelevel=1,
    #                  num_classlevel=[87]),
    #  ),

    loss_function=dict(
        loss_ce=dict(type="CrossEntropyLoss",
                    params=dict(ignore_index=255)),
        loss_lt=dict(type="PRLDAMLoss",
                    params=dict(s=1,ignore_index=255)),
        loss_ag=dict(type="ChanneldevilLoss",
                    params=dict(cnum=4,
                    num_class=73,
                    use_mask=True,
                    ignore_index=255)),
    ),
    optimizer=dict(
#        type="Adam",
#        params=dict(lr=0.001,
#                    weight_decay=0.0001),
        type="AdamW",
        params=dict(lr=1e-3,
                    weight_decay=0.000,)
    ),
    lr_scheduler=dict(type="CosineLRScheduler",
        params=dict(
            t_initial=1,
            lr_min=float(5e-6),
            warmup_lr_init=float(1e-8),
            warmup_t=5,
            cycle_limit=int(1),
            t_in_epochs=True,)),

    trainer=dict(type='UnequalImage_SinglevelTrainer_womap_pr_cd',
                 params=dict(
                    max_iters=1,
                    gpu_ids=[4],
                    grad_clip=1,
                    lambda_l1=0.1,
                    lambda_l2=0.5,
                    lambda_l3=0.5,
                    lambda_l4=0.5,
                    lambda_lt=0.3,
                    lambda_cd_alpha=0.5,
                    lambda_cd_beta=10.0,
                 )),
    meta=dict(
        log_way="scaler" ,##option:["scaler","wandb"],
        ignore_index=255,
        save_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/result_2/mini_2_sl_l3/time",
        area="SK",
        best_iter=1,
        max_iter=1,
        train_level=3,
        model_name="tsvit_fg",
        train_mode="ltpr_no_cdce", #[lt_dw_no,ltpr_no,ltpr_dw_no,ce_no_no,ltpr_no_ce,ltpr_no_ag,ltpr_dw_ag,ltpr_no_cdce] 
        num_classlevel=[6,32,73,87],
        num_each_level=dict(
        l1=[39791879, 776723, 1042088, 747, 123135, 149178],
        l2=[13467507, 970393, 329251, 602, 13743982, 11239, 9194, 5453798, 1244907, 21632, 303054, 36359, 1330070, 12318, 346341, 115799, 9781, 10992, 2154791, 3773, 216096, 776723, 248006, 6827, 49045, 707210, 15956, 15044, 747, 101500, 21635, 149178],
        l3=[1336889, 3078326, 544334, 6361579, 637196, 628046, 199409, 419745, 261983, 502, 2497, 14729, 924413, 28252, 329251, 602, 647, 17356, 8153883, 4758021, 456680, 7630, 2304, 88518, 99445, 155864, 3634, 11239, 4148, 2158112, 3295686, 1244907, 21632, 1655, 229, 1917, 299253, 36359, 1330070, 12318, 320155, 26186, 10097, 105702, 9781, 10992, 5044, 50318, 127424, 1972005, 3389, 216096, 776723, 130260, 15447, 16868, 18305, 4745, 37081, 345, 1151, 5240, 91, 1, 106, 48939, 707210, 15956, 5252, 747, 101500, 21635, 149178],
        l4=[640507, 696382, 3078326, 544334, 2064498, 4297081, 9858, 628046, 199409, 419745, 261983, 502, 2497, 14729, 924413, 28252, 329251, 602, 647, 17356, 8095127, 19895, 4758021, 456680, 7630, 2304, 1052, 27702, 9250, 99445, 155864, 3634, 11239, 5046, 4148, 2056465, 90879, 10768, 3295686, 1244907, 21632, 1655, 229, 1917, 299253, 36359, 1330070, 12318, 320155, 5187, 2290, 1305, 17404, 10097, 105702, 9781, 10992, 5044, 50318, 127424, 1972005, 384, 3389, 216096, 776723, 25300, 130260, 15447, 16868, 18305, 4745, 37081, 345, 1151, 5240, 91, 1, 106, 48939, 707210, 15956, 9792, 5252, 747, 101500, 21635, 149178]
        ),
        parcel_each_level=dict(
        l1=[20663,1336,1744,4,86,140],
        l2=[8478,443,244,6,4742,67,11,2680,2314,66,227,26,326,9,243,65,7,22,397,9,281,1336,468,22,51,1174,14,15,4,74,12,140],
        l3=[1398,831,305,4100,558,676,175,318,117,1,1,6,423,12,244,6,3,1,2264,2026,145,7,14,110,62,100,10,67,2,1813,867,2314,66,7,3,10,207,26,326,9,164,79,11,54,7,22,10,31,51,305,6,281,1336,162,41,25,38,18,66,3,8,9,2,0.1,1,50,1174,14,3,4,74,12,140],
        l4=[750,648,831,305,1219,2881,5,676,175,318,117,1,1,6,423,12,244,6,3,1,2228,9,2026,145,7,14,1,22,31,62,100,10,67,9,2,1608,195,10,867,2314,66,7,3,10,207,26,326,9,164,12,8,7,52,11,54,7,22,10,31,51,305,3,6,281,1336,118,162,41,25,38,18,66,3,8,9,2,0.1,1,50,1174,14,12,3,4,74,12,140],
        
        ),
        map_dict={1: {0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63], 1: [64], 2: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82], 3: [83], 4: [84, 85], 5: [86]},
                  2: {0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1: [11, 12, 13, 14, 15], 2: [16], 3: [17], 4: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 5: [32], 6: [33, 34], 7: [35, 36, 37, 38], 8: [39], 9: [40], 10: [41, 42, 43, 44], 11: [45], 12: [46], 13: [47], 14: [48, 49, 50, 51, 52], 15: [53, 54], 16: [55], 17: [56], 18: [57, 58, 59, 60], 19: [61, 62], 20: [63], 21: [64], 22: [65, 66, 67, 68, 69, 70, 71], 23: [72, 73, 74, 75, 76], 24: [77, 78], 25: [79], 26: [80], 27: [81, 82], 28: [83], 29: [84], 30: [85], 31: [86]},
                  3: {0: [0, 1], 1: [2], 2: [3], 3: [4, 5], 4: [6], 5: [7], 6: [8], 7: [9], 8: [10], 9: [11], 10: [12], 11: [13], 12: [14], 13: [15], 14: [16], 15: [17], 16: [18], 17: [19], 18: [20, 21], 19: [22], 20: [23], 21: [24], 22: [25], 23: [26, 27, 28], 24: [29], 25: [30], 26: [31], 27: [32], 28: [34], 29: [35, 36, 37], 30: [38], 31: [39], 32: [40], 33: [41], 34: [42], 35: [43], 36: [44], 37: [45], 38: [46], 39: [47], 40: [48], 41: [49, 50, 51, 52], 42: [53], 43: [54], 44: [55], 45: [56], 46: [57], 47: [58], 48: [59], 49: [60], 50: [62], 51: [63], 52: [64], 53: [66], 54: [67], 55: [68], 56: [69], 57: [70], 58: [71], 59: [72], 60: [73], 61: [74], 62: [75], 63: [76], 64: [77], 65: [78], 66: [79], 67: [80], 68: [82], 69: [83], 70: [84], 71: [85], 72: [86]}}
    ),

)

infer_config = dict(
    infer=dict(
        type="Singlevel_inference",
        params=dict(
#        model=dict(
#               type="utae",
#               params=dict(input_dim=10,
#                   num_labelevel=1,
#                   encoder_widths=[64, 64, 64, 128],
#                   decoder_widths=[32, 32, 64, 128],
#                   num_classlevel=[73],
#                   use_channel_fg=True,
#                   channel_group=4),
#         ),
       model=dict(
             type="tsvit",
             params=dict(num_channels=10,
                   no_labellevel=1,
                   num_classlevel=[73],
                   use_channel_fg=True,
                   channel_group=4,
                   ),
       ),
         
        meta=dict(
            label_mode=True,
            small_patch=True,
            parcel_constraint=True,
            area="SK",
            model_name="tsvit_prldam_cd",
            gpu_ids=[1],
            optimal_epoch=50,
            model_mode="multi",  # option:["single","multi"]
            patch_size=(32, 32),
            over_lap_ratio=0.1,
            num_feature=10,
            tile_name=["33UXP", "33UYP"],
            doy={"33UXP": [32, 167, 187, 207, 222, 247, 252, 277, 297, 302, 327],
                 "33UYP": [57, 62, 167, 187, 222, 252, 277, 282, 297, 302, 327]},
            image_path_root="/data1/ll20/Pub_dataset/EuroCrops/SK_select/S2_SITS",
            parcel_path_root="/data1/ll20/Pub_dataset/EuroCrops/SK_select/S2_SITS_Parcel",
            yaml_path_root="/data1/ll20/Pub_dataset/EuroCrops/SK_select/statistic",
            save_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/result_2/mini_2_sl_l3/tsvit_prldam_cd/",
            num_classlevel=[73],
            label_level=3,
            map_dict={
                1: {
                    0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                        26,
                        27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                        51,
                        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63],
                    1: [64],
                    2: [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82],
                    3: [83],
                    4: [84, 85],
                    5: [86]},

                2: {0: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1: [11, 12, 13, 14, 15], 2: [16], 3: [17],
                    4: [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], 5: [32], 6: [33, 34],
                    7: [35, 36, 37, 38], 8: [39], 9: [40], 10: [41, 42, 43, 44], 11: [45], 12: [46], 13: [47],
                    14: [48, 49, 50, 51, 52], 15: [53, 54], 16: [55], 17: [56], 18: [57, 58, 59, 60],
                    19: [61, 62], 20: [63], 21: [64], 22: [65, 66, 67, 68, 69, 70, 71], 23: [72, 73, 74, 75, 76],
                    24: [77, 78], 25: [79], 26: [80], 27: [81, 82], 28: [83], 29: [84], 30: [85], 31: [86]},

                3: {0: [0, 1], 1: [2], 2: [3], 3: [4, 5], 4: [6], 5: [7], 6: [8], 7: [9], 8: [10], 9: [11],
                    10: [12], 11: [13], 12: [14], 13: [15], 14: [16], 15: [17], 16: [18], 17: [19], 18: [20, 21],
                    19: [22], 20: [23], 21: [24], 22: [25], 23: [26, 27, 28], 24: [29], 25: [30], 26: [31],
                    27: [32], 28: [34], 29: [35, 36, 37], 30: [38], 31: [39], 32: [40], 33: [41], 34: [42],
                    35: [43], 36: [44], 37: [45], 38: [46], 39: [47], 40: [48], 41: [49, 50, 51, 52], 42: [53],
                    43: [54], 44: [55], 45: [56], 46: [57], 47: [58], 48: [59], 49: [60], 50: [62], 51: [63],
                    52: [64], 53: [66], 54: [67], 55: [68], 56: [69], 57: [70], 58: [71], 59: [72], 60: [73],
                    61: [74], 62: [75], 63: [76], 64: [77], 65: [78], 66: [79], 67: [80], 68: [82], 69: [83],
                    70: [84], 71: [85], 72: [86]}},
            color_map_dict={
                1: {
                    0: (132, 85, 109),
                    1: (59, 76, 240),
                    2: (133, 193, 225),
                    3: (30, 1, 201),
                    4: (101, 74, 197),
                    5: (120, 13, 235),
                    255: (217, 217, 217),
                },
                2: {
                    0: (47, 28, 105),
                    1: (49, 45, 187),
                    2: (104, 24, 92),
                    3: (110, 117, 26),
                    4: (173, 28, 213),
                    5: (205, 170, 8),
                    6: (201, 92, 196),
                    7: (92, 207, 170),
                    8: (130, 14, 50),
                    9: (6, 246, 229),
                    10: (226, 163, 60),
                    11: (48, 190, 40),
                    12: (126, 103, 124),
                    13: (206, 249, 112),
                    14: (189, 65, 100),
                    15: (47, 191, 204),
                    16: (144, 255, 18),
                    17: (222, 53, 145),
                    18: (236, 132, 202),
                    19: (236, 64, 28),
                    20: (70, 140, 70),
                    21: (197, 90, 227),
                    22: (134, 143, 196),
                    23: (56, 222, 210),
                    24: (254, 102, 204),
                    25: (225, 20, 139),
                    26: (151, 152, 85),
                    27: (119, 150, 55),
                    28: (92, 116, 96),
                    29: (23, 45, 185),
                    30: (247, 15, 20),
                    31: (86, 122, 71),
                    255: (217, 217, 217),
                },
                3: {

                    0: (117, 212, 206),
                    1: (101, 117, 48),
                    2: (141, 36, 188),
                    3: (115, 86, 17),
                    4: (129, 154, 189),
                    5: (244, 97, 137),
                    6: (188, 235, 126),
                    7: (137, 45, 122),
                    8: (8, 152, 81),
                    9: (3, 223, 210),
                    10: (235, 143, 188),
                    11: (247, 63, 75),
                    12: (152, 224, 175),
                    13: (190, 149, 23),
                    14: (150, 128, 9),
                    15: (144, 137, 51),
                    16: (182, 19, 86),
                    17: (162, 136, 53),
                    18: (166, 182, 211),
                    19: (111, 244, 255),
                    20: (39, 87, 106),
                    21: (117, 43, 186),
                    22: (138, 161, 185),
                    23: (218, 39, 226),
                    24: (200, 60, 246),
                    25: (37, 198, 141),
                    26: (89, 229, 111),
                    27: (185, 152, 105),
                    28: (199, 127, 230),
                    29: (195, 162, 219),
                    30: (128, 93, 179),
                    31: (96, 125, 233),
                    32: (234, 129, 23),
                    33: (63, 33, 174),
                    34: (42, 253, 36),
                    35: (5, 59, 89),
                    36: (30, 160, 56),
                    37: (219, 10, 158),
                    38: (109, 54, 17),
                    39: (95, 94, 234),
                    40: (120, 63, 12),
                    41: (62, 9, 152),
                    42: (193, 176, 136),
                    43: (42, 87, 177),
                    44: (176, 17, 222),
                    45: (55, 142, 208),
                    46: (82, 57, 2),
                    47: (247, 72, 18),
                    48: (255, 6, 87),
                    49: (71, 69, 48),
                    50: (224, 131, 151),
                    51: (108, 222, 236),
                    52: (213, 114, 213),
                    53: (153, 92, 79),
                    54: (219, 219, 200),
                    55: (66, 68, 118),
                    56: (87, 33, 253),
                    57: (138, 223, 186),
                    58: (210, 153, 20),
                    59: (157, 237, 148),
                    60: (178, 174, 7),
                    61: (101, 34, 243),
                    62: (147, 252, 197),
                    63: (92, 140, 72),
                    64: (86, 94, 0),
                    65: (226, 195, 26),
                    66: (196, 141, 88),
                    67: (112, 108, 41),
                    68: (82, 152, 150),
                    69: (59, 98, 211),
                    70: (58, 53, 57),
                    71: (105, 202, 189),
                    72: (224, 39, 0),
                    255: (217, 217, 217),

                },
                4: {
                    0: (231, 160, 22),
                    1: (80, 248, 158),
                    2: (114, 247, 65),
                    3: (251, 238, 137),
                    4: (13, 76, 160),
                    5: (211, 222, 90),
                    6: (109, 154, 38),
                    7: (120, 133, 242),
                    8: (112, 159, 15),
                    9: (170, 248, 183),
                    10: (234, 139, 22),
                    11: (93, 104, 249),
                    12: (155, 71, 150),
                    13: (14, 11, 96),
                    14: (78, 99, 107),
                    15: (110, 163, 202),
                    16: (101, 176, 154),
                    17: (116, 157, 239),
                    18: (3, 214, 224),
                    19: (20, 84, 235),
                    20: (0, 241, 224),
                    21: (121, 252, 194),
                    22: (49, 27, 173),
                    23: (35, 29, 113),
                    24: (25, 153, 74),
                    25: (208, 218, 189),
                    26: (47, 207, 10),
                    27: (117, 127, 187),
                    28: (25, 19, 110),
                    29: (12, 198, 26),
                    30: (178, 253, 165),
                    31: (152, 132, 169),
                    32: (37, 186, 100),
                    33: (235, 0, 209),
                    34: (208, 62, 181),
                    35: (212, 204, 187),
                    36: (139, 103, 84),
                    37: (152, 70, 104),
                    38: (212, 199, 44),
                    39: (183, 96, 148),
                    40: (89, 239, 197),
                    41: (89, 49, 192),
                    42: (27, 134, 125),
                    43: (48, 12, 118),
                    44: (36, 251, 79),
                    45: (60, 190, 237),
                    46: (32, 110, 180),
                    47: (73, 198, 177),
                    48: (21, 1, 80),
                    49: (188, 132, 110),
                    50: (237, 65, 210),
                    51: (103, 12, 206),
                    52: (138, 144, 17),
                    53: (172, 122, 230),
                    54: (94, 201, 20),
                    55: (175, 142, 154),
                    56: (50, 109, 142),
                    57: (121, 232, 149),
                    58: (218, 47, 163),
                    59: (62, 61, 138),
                    60: (174, 6, 141),
                    61: (204, 28, 191),
                    62: (128, 31, 72),
                    63: (218, 77, 72),
                    64: (82, 139, 190),
                    65: (104, 74, 2),
                    66: (216, 214, 21),
                    67: (127, 65, 235),
                    68: (80, 40, 68),
                    69: (224, 249, 255),
                    70: (165, 16, 61),
                    71: (185, 108, 99),
                    72: (218, 32, 154),
                    73: (107, 22, 109),
                    74: (7, 245, 181),
                    75: (153, 194, 149),
                    76: (84, 119, 174),
                    77: (225, 160, 31),
                    78: (48, 139, 214),
                    79: (84, 7, 112),
                    80: (62, 8, 193),
                    81: (92, 24, 194),
                    82: (13, 115, 4),
                    83: (47, 58, 220),
                    84: (100, 251, 99),
                    85: (146, 71, 216),
                    86: (95, 236, 192),
                    255: (217, 217, 217),
                }
            },
          test_data_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/NPY_mini_norm_crop_small_2/test",
          test_label_rgb_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/NPY_mini_norm_crop_small_2/test_label3_rgb",
          save_fea_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/result_2/mini_2_sl_l3/ablation/tsvit/fea_vis",
          true_label_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/EU_label/mosaic_label/inference",
          parcel_mosaic_path="/data1/ll20/Pub_dataset/EuroCrops/SK_select/EU_label/mosaic_label/inference/mosaic_3",
          num_class_vis=2000,
          true_false_color_dict={
          1:(6,255,0),
          2:(249,7,22),
          255: (217, 217, 217),
          },
        )

    ),

)
)



